# SPDX-FileCopyrightText: 2019â€“2022 Pynguin Contributors
#
# SPDX-License-Identifier: LGPL-3.0-or-later

image: python:${PYTHON_VERSION}

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID         # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'main'  # Execute jobs when a new commit is pushed to main branch

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  key: virtualenv
  paths:
    - .venv/
    - .cache/pip
    - .cache/pypoetry

.python-cache: &python-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/pip
      - .cache/pypoetry

stages:
  - build
  - lint
  - test
  - security
  - deploy

before_script:
  - python --version
  - pip install poetry
  - poetry config virtualenvs.in-project true
  - poetry install

.unit-tests: &unit-tests
  stage: test
  script:
    - poetry run pytest -q --cov=pynguin --cov=tests --cov-branch --cov-report html:cov_html --cov-report=term-missing tests/
  artifacts:
    paths:
      - cov_html
  needs: ["build"]
  <<: *python-cache

unit-tests:python-3.10:
  <<: *unit-tests
  variables:
    PYTHON_VERSION: '3.10-bullseye'

#unit-tests:python-3.11:
#  <<: *unit-tests
#  allow_failure: true
#  variables:
#    PYTHON_VERSION: '3.11-rc-bullseye'

.nightly-tests:
  only:
    - schedules
  stage: test
  before_script:
    - python --version
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install
    - poetry add --dev pytest-random-order
  script:
    - for ((i=1; i<=10; i++)); do echo "test run ${i}\n"; poetry run pytest -q --cov=pynguin --cov=tests --cov-branch --random-order --random-order-bucket=global ; done
  needs: ["build"]
  <<: *python-cache

nightly-tests:python-3.10:
  extends: .nightly-tests
  variables:
    PYTHON_VERSION: '3.10-bullseye'

#nightly-tests:python-3.11:
#  extends: .nightly-tests
#  allow_failure: true
#  variables:
#    PYTHON_VERSION: '3.11-rc-bullseye'

lint:
  stage: lint
  image: python:3.10-bullseye
  script:
    - poetry run mypy pynguin
    - poetry run flake8 .
    - poetry run pylint pynguin
    - poetry run darglint -v 2 pynguin/**/*.py
  needs: ["build"]
  <<: *python-cache

build:
  stage: build
  image: python:3.10-bullseye
  script:
    - poetry run isort **/*.py -c -v --profile black
    - poetry run black --check .
    - poetry run sphinx-build docs docs/_build
  artifacts:
    paths:
      - docs/_build
  <<: *python-cache

security:
  stage: security
  image: python:3.10-bullseye
  script:
    - poetry run safety check --full-report
    - poetry run bandit -ll -r pynguin
  needs: ["build"]
  <<: *python-cache

# check license declarations etc.
reuse:
  stage: lint
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  before_script:
    - python --version
  script:
    - reuse lint
  needs: []
