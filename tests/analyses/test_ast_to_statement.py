#  This file is part of Pynguin.
#
#  SPDX-FileCopyrightText: 2019â€“2022 Pynguin Contributors
#
#  SPDX-License-Identifier: LGPL-3.0-or-later
#
import ast

import pytest

from pynguin.analyses.seeding import AstToTestCaseTransformer
from pynguin.generation.export.exportprovider import ExportProvider
from pynguin.setup.testclustergenerator import TestClusterGenerator


# TODO(fk) this is not correct, i.e. in the second example str3 should be dict0 and var0
#  should be list0. However, this is a more complex problem in AST -> Statement
#  conversion.
@pytest.mark.parametrize(
    "testcase_seed",
    [
        (
            """    float_0 = 1.1
    var_0 = module_0.positional_only(float_0)"""
        ),
        (
            """    float_0 = 1.1
    int_0 = 42
    var_0 = []
    str_0 = 'test'
    str_1 = 'key'
    str_2 = 'value'
    str_3 = {str_1: str_2}
    var_1 = module_0.all_params(float_0, int_0, *var_0, param4=str_0, **str_3)"""
        ),
    ],
)
def test_parameter_mapping_roundtrip(testcase_seed, tmp_path):
    testcase_seed = (
        """# Automatically generated by Pynguin.
import tests.fixtures.grammar.parameters as module_0

def test_case_0():
"""
        + testcase_seed
    )
    test_cluster = TestClusterGenerator(
        "tests.fixtures.grammar.parameters"
    ).generate_cluster()
    transformer = AstToTestCaseTransformer(test_cluster, False)
    transformer.visit(ast.parse(testcase_seed))
    export_path = tmp_path / "export.py"
    ExportProvider.get_exporter().export_sequences(export_path, transformer.testcases)
    with open(export_path) as f:
        content = f.read()
        assert content == testcase_seed
